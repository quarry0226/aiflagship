syntax = "proto3";

package iclab.abc.api;

import "iclab/abc/common.proto";
import "iclab/abc/resource.proto";
import "iclab/abc/enum.proto";
import "iclab/abc/experiment.proto";


option java_package = "kaist.iclab.abc.protos";
option java_outer_classname = "ApiProtos";

message RawDataListQuery {
    repeated iclab.abc.enum.RawDataType type = 1;
    string email = 2;
    string experiment_uuid = 3;
    string experiment_group = 4;
    int64 from_timestamp = 5;
    int64 to_timestamp = 6;
    int32 limit = 7;
}

message ExperimentListQuery {
    string experimenter_email = 1;
    int64 from_timestamp = 3;
    int64 to_timestamp = 4;
    int32 limit = 5;
}

message SubjectListQuery {
    string experiment_uuid = 1;
    string experiment_group = 2;
    int64 from_timestamp = 3;
    int64 to_timestamp = 4;
    int32 limit = 5;
}

message ExperimentOneQuery {
    string experiment_uuid = 1;
    string email = 2;
}

message AppVersionQuery {
    iclab.abc.enum.DataSourceType source_type = 1;
}

service RawDataManagementApi {
    rpc CreateRawData(stream iclab.abc.resource.RawData) returns (iclab.abc.common.Empty) {}
    rpc ListRawData(RawDataListQuery) returns (stream iclab.abc.resource.RawData) {}
}

service ExperimentApi {
    rpc ListExperiments(ExperimentListQuery) returns (stream iclab.abc.experiment.ExperimentEssential) {}
    rpc GetExperiment(ExperimentOneQuery) returns (iclab.abc.experiment.ExperimentFull) {}
    rpc ListSubjects(SubjectListQuery) returns (stream iclab.abc.experiment.Subject) {}
    rpc ParticipateInExperiment(iclab.abc.experiment.Subject) returns (iclab.abc.common.Empty) {}
    rpc DropOutExperiment(iclab.abc.experiment.Subject) returns (iclab.abc.common.Empty) {}
    rpc GetParticipatedExperiment(ExperimentOneQuery) returns (iclab.abc.experiment.ExperimentParticipated) {}
}

service LogApi {    
    rpc UploadLog(stream iclab.abc.common.Log) returns (iclab.abc.common.Empty) {}
}

service AppApi {
    rpc GetLatestVerison(AppVersionQuery) returns (iclab.abc.common.AppVersion) {}
}